{"version":3,"sources":["components/authlogin/authlogin.js","components/authview/authview.js","components/options/options.js","components/registrys/registrys.js","components/rsvp/rsvp.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Authlogin","react_default","a","createElement","type","placeholder","name","required","Component","Authview","Options","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Registrys","href","Rsvp","Routes","react_router","path","component","exact","App","goHome","props","history","push","loginClick","rsvpClick","registryClick","axios","get","then","res","console","log","data","className","onClick","routes","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13ca51ad.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Authlogin extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n    <p>Username</p>\r\n    <input type=\"text\" placeholder=\"Enter Username\" name=\"uname\" required/>\r\n\r\n    <p>Password</p>\r\n    <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required/>\r\n\r\n    <p></p>\r\n    <button>Login</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Authlogin","import React, { Component } from 'react'\r\n\r\nclass Authview extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Authview","import React, { Component } from 'react'\r\n\r\nclass Options extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <h2>Welcome</h2>\r\n                <h2>Kaylah and Jacob</h2>\r\n                <h4>9/21/19</h4>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Options","import React, { Component } from 'react'\r\n\r\nclass Registrys extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Amazon</h2>\r\n                <a href=\"https://www.amazon.com/\">Registry</a>\r\n                <h2>Target</h2>\r\n                <a href=\"https://www.target.com/\">Registry</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Registrys","import React, { Component } from 'react'\r\n\r\nclass Rsvp extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Name:</p>\r\n                <input type=\"text\" placeholder=\"Name\"/>\r\n                <p>Are you comming?</p>\r\n                <select>\r\n                    <option></option>\r\n                    <option>Yes</option>\r\n                    <option>No</option>\r\n                </select>\r\n                <p>Address line 1:</p>\r\n                <input type=\"text\" placeholder=\"Address line 1\"/>\r\n                <p>Address line 2:</p>\r\n                <input type=\"text\" placeholder=\"Address line 2\"/>\r\n                <p>City:</p>\r\n                <input type=\"text\" placeholder=\"City\"/>\r\n                <p>State:</p>\r\n                <input type=\"text\" placeholder=\"State\"/>\r\n                <p>Zip code:</p>\r\n                <input type=\"text\" placeholder=\"Zip code\"/>\r\n                <p>What song would you like to hear?:</p>\r\n                <input type=\"text\" placeholder=\"Song\"/>\r\n                <p></p>\r\n                <button>Submit</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Rsvp","import React, { Component } from 'react'\r\n\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\nimport Authlogin from './components/authlogin/authlogin';\r\nimport Authview from './components/authview/authview';\r\nimport Options from './components/options/options';\r\nimport Registrys from './components/registrys/registrys';\r\nimport Rsvp from './components/rsvp/rsvp';\r\n\r\nclass Routes extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n           <Switch>\r\n                <Route path=\"/login\" component={Authlogin}/>\r\n                <Route path=\"/registry\" component={Registrys}/>\r\n                <Route path=\"/rsvp\" component={Rsvp}/>\r\n                <Route path=\"/auth\" component={Authview}/>\r\n                <Route exact path=\"/\" component={Options}/>\r\n            </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes","import React, { Component } from 'react';\nimport './App.css';\nimport Routes from './routes';\nimport {withRouter} from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(){\n    super()\n  }\n\n  goHome = () => {\n    this.props.history.push('/')\n  }\n\n  loginClick = () => {\n    this.props.history.push('/login')\n}\n\nrsvpClick = () => {\n    this.props.history.push('/rsvp')\n}\n\nregistryClick = () => {\n    this.props.history.push('/registry')\n}\n\n  componentDidMount(){\n    axios.get('/api/ping')\n    .then((res) => {\n      console.log(res.data)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"overhead\">\n        <h5 onClick = {this.loginClick}>Login</h5>\n        <h1 onClick={this.goHome}>Home</h1>\n        <h1 onClick = {this.rsvpClick}>RSVP</h1>\n        <h1 onClick = {this.registryClick}>Registry</h1>\n      </div>\n      <Routes/>\n    </div>\n    )\n  }\n}\n\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}